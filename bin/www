#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
* Connect to mongodb
*/

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/rideshare');

/**
* socket.io
*/
var io = require('socket.io')(server);
io.on("connection", function(socket) {
    console.log("User has connected");

    socket.on("disconnect", function(){
        console.log("User has disconnected");
    });

    socket.on("new ride", function(ride) {
        console.log("Adding ride: ");
        console.log(ride);
        socket.broadcast.emit("new ride", ride);
    });

    socket.on("join ride", function(usrRide){
        var userName = usrRide.user.givenName+usrRide.user.familyName.charAt(0);
        socket.join(usrRide.rideId);

        console.log("User "+userName+" has joined ride "+usrRide.ride);
    });

    socket.on("join chat", function(chat){
        var userName = chat.user;
        socket.join(chat.room);
        console.log("User "+chat.user+" has joined chat "+chat.room);
        socket.to(chat.room).emit("join chat", chat);
    });

    socket.on("I'm here", function(here){
      socket.to(here.room).emit("I'm here", here);
    });

    socket.on("chat message", function(msg){
        console.log("Emitting "+msg.text+" to room "+msg.room);
        socket.to(msg.room).emit("chat message", msg);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port : 
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  console.log('Listening on port ' + addr.port);
}
